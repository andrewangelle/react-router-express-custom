// IDK why this is needed when it's in the tsconfig...
/// <reference lib="DOM.Iterable" />

import {
  createReadableStreamFromReadable,
  writeReadableStreamToWritable,
} from '@react-router/node';
import type * as express from 'express';
import type {
  AppLoadContext,
  UNSAFE_MiddlewareEnabled as MiddlewareEnabled,
  RouterContextProvider,
  ServerBuild,
} from 'react-router';
import { createRequestHandler } from 'react-router';

type MaybePromise<T> = T | Promise<T>;

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action, such as
 * values that are generated by Express middleware like `req.session`.
 */
export type GetLoadContextFunction = (
  req: express.Request,
  res: express.Response,
) => MiddlewareEnabled extends true
  ? MaybePromise<RouterContextProvider>
  : MaybePromise<AppLoadContext>;

export type RequestHandler = (
  req: express.Request,
  res: express.Response,
  next: express.NextFunction,
) => Promise<void>;

/**
 * Returns a request handler for Express that serves the response using react router framework mode.
 */
export function createReactRouterRequestHandler({
  build,
  getLoadContext,
  mode = process.env.NODE_ENV,
}: {
  build: ServerBuild | (() => Promise<ServerBuild>);
  getLoadContext?: GetLoadContextFunction;
  mode?: string;
}): RequestHandler {
  const handleRequest = createRequestHandler(build, mode);

  return async (
    req: express.Request,
    res: express.Response,
    next: express.NextFunction,
  ) => {
    try {
      const request = createReactRouterRequest(req, res);
      const loadContext = await getLoadContext?.(req, res);
      const url = new URL(request.url);
      const isPostRenderRequest =
        req.method === 'POST' && !url.pathname.startsWith('/api');

      if (isPostRenderRequest) {
        // We expicitly want to handle some renders from POST routes
        // React router will throw 405 by default
        // when attempting to handle document requests from anything other than GET
        // Create a new request instance as a GET for react router to handle
        // And return the response to the original incoming POST request
        const getRequest = new Request(request.url, {
          method: 'GET',
          headers: request.headers,
        });
        const response = await handleRequest(getRequest, loadContext);
        await sendReactRouterResponse(res, response);

        // handle requests as normal
      } else {
        const response = await handleRequest(request, loadContext);
        await sendReactRouterResponse(res, response);
      }
    } catch (error: unknown) {
      // Express doesn't support async functions, so we have to pass along the
      // error manually using next().
      next(error);
    }
  };
}

export function createReactRouterHeaders(
  requestHeaders: express.Request['headers'],
): Headers {
  const headers = new Headers();

  for (const [key, values] of Object.entries(requestHeaders)) {
    if (values) {
      if (Array.isArray(values)) {
        for (const value of values) {
          headers.append(key, value);
        }
      } else {
        headers.set(key, values);
      }
    }
  }

  return headers;
}

export function createReactRouterRequest(
  req: express.Request,
  res: express.Response,
): Request {
  // req.hostname doesn't include port information so grab that from
  // `X-Forwarded-Host` or `Host`
  const [, hostnamePortStr] = req.get('X-Forwarded-Host')?.split(':') ?? [];
  const [, hostPortStr] = req.get('host')?.split(':') ?? [];
  const hostnamePort = Number.parseInt(hostnamePortStr, 10);
  const hostPort = Number.parseInt(hostPortStr, 10);
  const port = Number.isSafeInteger(hostnamePort)
    ? hostnamePort
    : Number.isSafeInteger(hostPort)
      ? hostPort
      : '';
  // Use req.hostname here as it respects the "trust proxy" setting
  const resolvedHost = `${req.hostname}${port ? `:${port}` : ''}`;
  // Use `req.originalUrl` so React Router is aware of the full path
  const url = new URL(`${req.protocol}://${resolvedHost}${req.originalUrl}`);

  // Abort action/loaders once we can no longer write a response
  let controller: AbortController | null = new AbortController();
  const init: RequestInit = {
    method: req.method,
    headers: createReactRouterHeaders(req.headers),
    signal: controller.signal,
  };

  // Abort action/loaders once we can no longer write a response iff we have
  // not yet sent a response (i.e., `close` without `finish`)
  // `finish` -> done rendering the response
  // `close` -> response can no longer be written to
  res.on('finish', () => (controller = null));
  res.on('close', () => controller?.abort());

  if (req.method !== 'GET' && req.method !== 'HEAD') {
    init.body = createReadableStreamFromReadable(req);
    (init as { duplex: 'half' }).duplex = 'half';
  }

  return new Request(url.href, init);
}

export async function sendReactRouterResponse(
  res: express.Response,
  nodeResponse: Response,
): Promise<void> {
  res.statusMessage = nodeResponse.statusText;
  res.status(nodeResponse.status);

  for (const [key, value] of nodeResponse.headers.entries()) {
    res.append(key, value);
  }

  if (nodeResponse.headers.get('Content-Type')?.match(/text\/event-stream/i)) {
    res.flushHeaders();
  }

  if (nodeResponse.body) {
    await writeReadableStreamToWritable(nodeResponse.body, res);
  } else {
    res.end();
  }
}
